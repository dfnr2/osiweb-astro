05 ;
10  	*=$5A7E	; load into RAM @ $5A7E
x15   ; 6551 I/O Port Addresses
x16   ;
x17   ACIADat	= 	$FC01
x18   ACIASta	=	$FC00
x19   ACIACmd	=	$7F72
x20   ACIACtl	=	$7F73
21   ;
22   ; page zero variables
23   ;
24   BOARD   =	$50 
25   BK      =	$60 
26   PIECE   =	$B0 
27   SQUARE  =	$B1 
28   SP2     =	$B2 
29   SP1     =	$B3 
30   INCHEK  =	$B4 
31   STATE   =	$B5 
32   MOVEN   =	$B6 
33   REV     =  $B7
34   OMOVE   =	$DC 
35   WCAP0   =	$DD 
36   COUNT   =	$DE 
37   BCAP2   =	$DE 
38   WCAP2   =	$DF 
39   BCAP1   =	$E0 
40   WCAP1   =	$E1 
41   BCAP0   =	$E2 
42   MOB     =	$E3 
43   MAXC    =	$E4 
44   CC      =	$E5 
45   PCAP    =	$E6 
46   BMOB    =	$E3 
47   BMAXC   =	$E4 
48   BMCC    =	$E5 
49   BMAXP   =	$E6 
50   XMAXC   =	$E8 
51   WMOB    =	$EB 
52   WMAXC   =	$EC 
53   WCC     =	$ED 
54   WMAXP   =	$EE 
55   PMOB    =	$EF 
56   PMAXC   =	$F0 
57   PCC     =	$F1 
58   PCP     =	$F2 
59   OLDKY   =	$F3 
60   BESTP   =	$FB 
61   BESTV   =	$FA 
62   BESTM   =	$F9 
63   DIS1    =	$FB 
64   DIS2    =	$FA 
65   DIS3    =	$F9 
66   TEMP    =  $FC
71   
72   		LDA     #$00	; REVERSE TOGGLE
73   		STA     REV
x74             JSR     Init_6551
75   CHESS	CLD		; INITIALIZE
76   		LDX	#$FF	; TWO STACKS
77   		TXS	
78   		LDX	#$C8
79   		STX	SP2
80   ;		
81   ;       ROUTINES TO
82   ;       DISPLAY AND GET KEY
83   ;       FROM KEYBOARD		
85   OUT	JSR	POUT	; DISPLAY AND
86   		JSR	KIN	; GET INPUT   *** my routine waits for a keypress
x87   		CMP	OLDKY	; KEY IN ACC  *** no need to debounce
x88  		BEQ	OUT	; (DEBOUNCE)
x89   		STA	OLDKY		
91   		CMP	#$43	; <C>
92   		BNE	NOSET	; SET UP
93   		LDX	#$1F	; BOARD
94   WHSET	LDA	SETW,X	; FROM
95   		STA	BOARD,X	; SETW
96   		DEX	
97   		BPL	WHSET
98   		LDX	#$1B	; *ADDED
99   		STX	OMOVE	; INITS TO $FF
100  		LDA	#$CC	; Display CCC
101  		BNE	CLDSP	
103  NOSET	CMP	#$45	; <E>
104  		BNE	NOREV	; REVERSE
105  		JSR	REVERSE ; BOARD IS
106  		SEC
107  		LDA	#$01
108  		SBC	REV
109  		STA	REV	; TOGGLE REV FLAG
110  		LDA	#$EE    ; IS
111  		BNE	CLDSP
112  ;		
113  NOREV	CMP	#$40	; <P>
114  		BNE	NOGO    ; PLAY CHESS
115  		JSR	GO
116  CLDSP	STA	DIS1    ; DISPLAY
117  		STA	DIS2    ; ACROSS
118  		STA	DIS3    ; DISPLAY
119  		BNE	CHESS
120  ;		
121  NOGO	CMP	#$0D    ; <Enter>
122  		BNE	NOMV    ; MOVE MAN
123  		JSR	MOVE    ; AS ENTERED
124  		JMP	DISP
125  NOMV	CMP     #$41	; <Q> ***Added to allow game exit***
126  		BEQ     DONE	; quit the game, exit back to system.  
127  		JMP	INPUT	; process move
128  DONE	JMP     $FF00	; *** MUST set this to YOUR OS starting address
129  ;		
130  ;       THE ROUTINE JANUS DIRECTS THE
131  ;       ANALYSIS BY DETERMINING WHAT
132  ;       SHOULD OCCUR AFTER EACH MOVE
133  ;       GENERATED BY GNM
137  JANUS	LDX	STATE
138  		BMI	NOCOUNT	
140  ;       THIS ROUTINE COUNTS OCCURRENCES
141  ;       IT DEPENDS UPON STATE TO INDEX
142  ;       THE CORRECT COUNTERS	
144  COUNTS	LDA	PIECE
145  		BEQ	OVER     ; IF STATE=8
146  		CPX 	#$08     ; DO NOT COUNT
147  		BNE	OVER     ; BLK MAX CAP
148  		CMP	BMAXP    ; MOVES FOR
149  		BEQ	XRT      ; WHITE		
151  OVER	INC	MOB,X    ; MOBILITY
152  		CMP 	#$01     ;  + QUEEN
153  		BNE	NOQ      ; FOR TWO
154  		INC	MOB,X		
156  NOQ	BVC	NOCAP
157  		LDY	#$0F     ; CALCULATE
158  		LDA	SQUARE   ; POINTS
159  ELOOP	CMP	BK,Y     ; CAPTURED
160  		BEQ	FOUN     ; BY THIS
161  		DEY		 ; MOVE
162  		BPL	ELOOP
163  FOUN	LDA	POINTS,Y
164  		CMP	MAXC,X
165  		BCC	LESS     ; SAVE IF
166  		STY	PCAP,X   ; BEST THIS
167  		STA	MAXC,X   ; STATE		
169  LESS	CLC	
170  		PHP		 ; ADD TO
171  		ADC	CC,X     ; CAPTURE
172  		STA	CC,X     ; COUNTS
173  		PLP			
175  NOCAP	CPX	#$04
176  		BEQ	ON4
177  		BMI	TREE     ;(=00 ONLY)
178  XRT	RTS			
180  ;      GENERATE FURTHER MOVES FOR COUNT
181  ;      AND ANALYSIS		
183  ON4	LDA	XMAXC    ; SAVE ACTUAL 
184  		STA	WCAP0    ; CAPTURE
185  		LDA	#$00     ; STATE=0
186  		STA	STATE
187  		JSR	MOVE     ; GENERATE
188  		JSR	REVERSE  ; IMMEDIATE
189  		JSR	GNMZ     ; REPLY MOVES  
190  		JSR	REVERSE		
192  		LDA	#$08     ; STATE=8
193  		STA	STATE    ; GENERATE
x194  ;		JSR	OHM      ; CONTINUATION
195  		JSR	UMOVE    ; MOVES		
197  		JMP	STRATGY  ; FINAL EVALUATION
198  NOCOUNT	CPX	#$F9
199  		BNE	TREE		
201  ;      DETERMINE IF THE KING CAN BE
202  ;      TAKEN, USED BY CHKCHK	
204  		LDA	BK       ; IS KING
205  		CMP	SQUARE   ; IN CHECK?
206  		BNE	RETJ     ; SET INCHEK=0
207  		LDA	#$00     ; IF IT IS
208  		STA	INCHEK
209  RETJ	RTS			
211  ;      IF A PIECE HAS BEEN CAPTURED BY
212  ;      A TRIAL MOVE, GENERATE REPLIES &
213  ;      EVALUATE THE EXCHANGE GAIN/LOSS	
215  TREE	BVC	RETJ     ; NO CAP
216  		LDY	#$07     ; (PIECES)
217  		LDA	SQUARE
218  LOOPX	CMP	BK,Y
219  		BEQ	FOUNX
220  		DEY	
221  		BEQ	RETJ     ; (KING)
222  		BPL	LOOPX    ; SAVE
223  FOUNX	LDA	POINTS,Y ; BEST CAP
224  		CMP	BCAP0,X  ; AT THIS
225  		BCC	NOMAX    ; LEVEL
226  		STA	BCAP0,X
227  NOMAX	DEC	STATE
228  		LDA	#$FB     ; IF STATE=FB
229  		CMP	STATE    ; TIME TO TURN
230  		BEQ	UPTREE   ; AROUND
231  		JSR	GENRM    ; GENERATE FURTHER
232  UPTREE	INC	STATE    ; CAPTURES
233  		RTS			
235  ;      THE PLAYER'S MOVE IS INPUT	
237  INPUT	CMP	#$08     ; NOT A LEGAL
238  		BCS	ERROR    ; SQUARE #
239  		JSR	DISMV
240  DISP	LDX	#$1F
241  SEARCH	LDA	BOARD,X
242  		CMP	DIS2
243  		BEQ	HERE     ; DISPLAY
244  		DEX		 ; PIECE AT    
245  		BPL	SEARCH   ; FROM
246  HERE	STX	DIS1     ; SQUARE
247  		STX	PIECE
248  ERROR	JMP	CHESS		
250  ;      GENERATE ALL MOVES FOR ONE
251  ;      SIDE, CALL JANUS AFTER EACH
252  ;      ONE FOR NEXT STE?
255  GNMZ	LDX	#$10     ; CLEAR
256  GNMX	LDA	#$00     ; COUNTERS
257  CLEAR	STA	COUNT,X
258  		DEX	
259  		BPL	CLEAR		
261  GNM	LDA	#$10     ; SET UP
262  		STA	PIECE    ; PIECE
263  NEWP	DEC	PIECE    ; NEW PIECE
264  		BPL	NEX      ; ALL DONE?
265  		RTS		 ; #NAME?		
267  NEX	JSR	RESET    ; READY
268  		LDY	PIECE    ; GET PIECE
269  		LDX	#$08
270  		STX	MOVEN    ; COMMON START
271  		CPY	#$08     ; WHAT IS IT?
272  		BPL	PAWN     ; PAWN
273  		CPY	#$06
274  		BPL	KNIGHT   ; KNIGHT
275  		CPY	#$04
276  		BPL	BISHOP   ; BISHOP
277  		CPY	#$01
278  		BEQ	QUEEN    ; QUEEN
279  		BPL	ROOK     ; ROOK	
281  KING	JSR	SNGMV    ; MUST BE KING!
282  		BNE	KING     ; MOVES
283  		BEQ	NEWP     ; 8 TO 1
284  QUEEN	JSR	LINE
285  		BNE	QUEEN    ; MOVES
286  		BEQ	NEWP     ; 8 TO 1		
288  ROOK	LDX	#$04
289  		STX	MOVEN    ; MOVES
290  AGNR	JSR	LINE     ; 4 TO 1
291  		BNE	AGNR
292  		BEQ	NEWP		
294  BISHOP	JSR	LINE
295  		LDA	MOVEN    ; MOVES
296  		CMP	#$04     ; 8 TO 5
297  		BNE	BISHOP
298  		BEQ	NEWP		
300  KNIGHT	LDX	#$10
301  		STX	MOVEN    ; MOVES
302  AGNN	JSR	SNGMV    ; 16 TO 9
303  		LDA	MOVEN
304  		CMP	#$08
305  		BNE	AGNN
306  		BEQ	NEWP	
308  PAWN	LDX	#$06
309  		STX	MOVEN
310  P1		JSR	CMOVE    ; RIGHT CAP?
311  		BVC	P2
312  		BMI	P2
313  		JSR	JANUS    ; YES
314  P2		JSR	RESET
315  		DEC	MOVEN    ; LEFT CAP?
316  		LDA	MOVEN
317  		CMP	#$05
318  		BEQ	P1
319  P3		JSR	CMOVE    ; AHEAD
320  		BVS	NEWP     ; ILLEGAL
321  		BMI	NEWP
322  		JSR	JANUS
323  		LDA	SQUARE   ; GETS TO
324  		AND	#$F0     ; 3RD RANK?
325  		CMP	#$20
326  		BEQ	P3       ; DO DOUBLE
327  		JMP	NEWP	
329  ;      CALCULATE SINGLE STEP MOVES
330  ;      FOR K,N		
332  SNGMV	JSR	CMOVE    ; CALC MOVE
333  		BMI	ILL1     ; -IF LEGAL
334  		JSR	JANUS    ; -EVALUATE
335  ILL1	JSR	RESET
336  		DEC	MOVEN
337  		RTS		
339  ;     CALCULATE ALL MOVES DOWN A
340  ;     STRAIGHT LINE FOR Q,B,R		
342  LINE	JSR	CMOVE    ; CALC MOVE
343  		BCC	OVL      ; NO CHK
344  		BVC	LINE	 ; NOCAP       
345  OVL	BMI	ILL      ; RETURN
346  		PHP	
347  		JSR	JANUS    ; EVALUATE POSN
348  		PLP	
349  		BVC	LINE     ; NOT A CAP
350  ILL	JSR	RESET    ; LINE STOPPED
351  		DEC	MOVEN    ; NEXT DIR
352  		RTS		
354  ;      EXCHANGE SIDES FOR REPLY
355  ;      ANALYSIS		
357  REVERSE	LDX	#$0F
358  ETC	SEC	
359  		LDY	BK,X     ; SUBTRACT
360  		LDA 	#$77     ; POSITION
361  		SBC  	BOARD,X  ; FROM 77
362  		STA  	BK,X
363  		STY  	BOARD,X  ; AND
364  		SEC	
365  		LDA	#$77     ; EXCHANGE
366  		SBC 	BOARD,X  ; PIECES
367  		STA  	BOARD,X
368  		DEX	
369  		BPL   	ETC
370  		RTS			
372  ;       CMOVE CALCULATES THE TO SQUARE
373  ;       USING SQUARE AND THE MOVE
374  ;       TABLE  FLAGS SET AS FOLLOWS:
375  ;       N#NAME?	MOVE
376  ;       V#NAME?	(LEGAL UNLESS IN CR)
377  ;       C#NAME?	BECAUSE OF CHECK		
382  CMOVE	LDA	SQUARE   ; GET SQUARE
383  		LDX	MOVEN    ; MOVE POINTER
384  		CLC	
385  		ADC	MOVEX,X  ; MOVE LIST
386  		STA	SQUARE   ; NEW POS'N
387  		AND	#$88
388  		BNE	ILLEGAL  ; OFF BOARD
389  		LDA	SQUARE			
391  		LDX	#$20
392  LOOP	DEX			; IS TO
393  		BMI	NO            	; SQUARE
394  		CMP  	BOARD,X        	; OCCUPIED?
395  		BNE   	LOOP
396  ;			
397  		CPX	#$10            ; BY SELF?
398  		BMI   	ILLEGAL
399  ;			
400  		LDA	#$7F		; MUST BE CAP!
401  		ADC	#$01            ; SET V FLAG
402  		BVS   	SPX 	        ; (JMP)
403  ;			
404  NO		CLV			; NO CAPTURE
405  ;			
406  SPX	LDA  	STATE         	; SHOULD WE
407  		BMI   	RETL           	; DO THE
408  		CMP	#$08 	        ; CHECK CHECK?
409  		BPL  	RETL			
411  ;       CHKCHK REVERSES SIDES
412  ;       AND LOOKS FOR A KING
413  ;       CAPTURE TO INDICATE
414  ;       ILLEGAL MOVE BECAUSE OF
415  ;       CHECK  SINCE THIS IS
416  ;       TIME CONSUMING, IT IS NOT
417  ;       ALWAYS DONE			
419  CHKCHK	PHA			; STATE  #392
420  		PHP	
421  		LDA	#$F9
422  		STA	STATE         	; GENERATE
423  		STA	INCHEK        	; ALL REPLY
424  		JSR	MOVE          	; MOVES TO
425  		JSR	REVERSE       	; SEE IF KING
426  		JSR	GNM           	; IS IN
427  		JSR	RUM           	; CHECK
428  		PLP	
429  		PLA	
430  		STA	STATE
431  		LDA	INCHEK
432  		BMI	RETL           	; NO - SAFE
433  		SEC			; YES - IN CHK
434  		LDA	#$FF
435  		RTS	
436  ;		
437  RETL	CLC			; LEGAL
438  		LDA	#$00            ; RETURN
439  		RTS	
440  ;		
441  ILLEGAL	LDA	#$FF
442  		CLC			; ILLEGAL
443  		CLV			; RETURN
444  		RTS			
446  ;       REPLACE PIECE ON CORRECT SQUARE
447  ;		
448  RESET	LDX	PIECE      	; GET LOGAT
449  		LDA	BOARD,X        	; FOR PIECE
450  		STA	SQUARE       	; FROM BOARD
451  		RTS			
454  ;		
455  GENRM	JSR	MOVE          	; MAKE MOVE
456  GENR2	JSR	REVERSE      	; REVERSE BOARD
457  		JSR	GNM          	; GENERATE MOVES
458  RUM	JSR	REVERSE   	; REVERSE BACK		
460  ;    ROUTINE TO UNMAKE A MOVE MADE BY
461  ;	  MOVE
462  ;		
463  UMOVE	TSX			; UNMAKE MOVE
464  		STX	SP1
465  		LDX	SP2           	; EXCHANGE
466  		TXS			; STACKS
467  		PLA			; MOVEN
468  		STA	MOVEN
469  		PLA			; CAPTURED
470  		STA	PIECE        	; PIECE
471  		TAX	
472  		PLA			; FROM SQUARE
473  		STA	BOARD,X
474  		PLA			; PIECE
475  		TAX	
476  		PLA			; TO SOUARE
477  		STA	SQUARE
478  		STA	BOARD,X
479  		JMP	STRV
480  ;		
481  ;       THIS ROUTINE MOVES PIECE
482  ;       TO SQUARE, PARAMETERS
483  ;       ARE SAVED IN A STACK TO UNMAKE
484  ;       THE MOVE LATER
485  ;		
486  MOVE	TSX	
487  		STX	SP1          	; SWITCH
488  		LDX	SP2          	; STACKS
489  		TXS	
490  		LDA	SQUARE
491  		PHA			; TO SQUARE
492  		TAY	
493  		LDX	#$1F
494  CHECK	CMP	BOARD,X        	; CHECK FOR
495  		BEQ	TAKE          	; CAPTURE
496  		DEX	
497  		BPL	CHECK
498  TAKE	LDA	#$CC
499  		STA	BOARD,X
500  		TXA			; CAPTURED
501  		PHA			; PIECE
502  		LDX	PIECE
503  		LDA	BOARD,X
504  		STY	BOARD,X        	; FROM
505  		PHA			; SQUARE
506  		TXA	
507  		PHA			; PIECE
508  		LDA	MOVEN
509  		PHA			; MOVEN
510  STRV	TSX	
511  		STX	SP2           	; SWITCH
512  		LDX	SP1           	; STACKS
513  		TXS			; BACK
514  		RTS				
516  ;       CONTINUATION OF SUB STRATGY
517  ;       -CHECKS FOR CHECK OR CHECKMATE
518  ;       AND ASSIGNS VALUE TO MOVE		
520  CKMATE	LDY	BMAXC         	; CAN BLK CAP
521  		CPX	POINTS       	; MY KING?
522  		BNE	NOCHEK	
523  		LDA	#$00           	; GULP!
524  		BEQ	RETV          	; DUMB MOVE!
525  ;		
526  NOCHEK	LDX	BMOB         	; IS BLACK
527  		BNE	RETV          	; UNABLE TO
528  		LDX	WMAXP        	; MOVE AND
529  		BNE	RETV          	; KING IN CH?
530  		LDA	#$FF           	; YES! MATE
531  ;		
532  RETV	LDX	#$04            ; RESTORE
533  		STX	STATE        	; STATE=4		
535  ;       THE VALUE OF THE MOVE (IN ACCU)
536  ;       IS COMPARED TO THE BEST MOVE AND
537  ;       REPLACES IT IF IT IS BETTER		
539  PUSH	CMP	BESTV         	; IS THIS BEST
540  		BCC	RETP          	; MOVE SO FAR?
541  		BEQ	RETP
542  		STA	BESTV        	; YES!
543  		LDA	PIECE        	; SAVE IT
544  		STA	BESTP
545  		LDA	SQUARE
546  		STA	BESTM        	; x
547  RETP	LDA	#"."		; print .
548  		JMP	SYSCHOUT	; print . AND return
549  ;		
550  ;       MAIN PROGRAM TO PLAY CHESS
551  ;       PLAY FROM OPENING OR THINK		
553  GO		LDX	OMOVE        	; OPENING?
554  		BMI	NOOPEN          ; -NO   *ADD CHANGE FROM BPL
555  		LDA	DIS3         	; -YES WAS
556  		CMP	OPNING,X        ; OPPONENT'S
557  		BNE	END            	; MOVE OK?
558  		DEX	
559  		LDA	OPNING,X       	; GET NEXT
560  		STA	DIS1         	; CANNED
561  		DEX			; OPENING MOVE
562  		LDA	OPNING,X
563  		STA	DIS3         	; DISPLAY IT
564  		DEX	
565  		STX	OMOVE        	; MOVE IT
566  		BNE	MV2            	; (JMP)
567  ;			
568  END	LDA     #$FF		; *ADD - STOP CANNED MOVES
569  		STA	OMOVE        	; FLAG OPENING
570  NOOPEN	LDX	#$0C            ; FINISHED
571  		STX	STATE        	; STATE=C
572  		STX	BESTV        	; CLEAR BESTV
573  		LDX	#$14           	; GENERATE P
574  		JSR	GNMX          	; MOVES
575  ;		
576  		LDX	#$04           	; STATE=4
577  		STX	STATE        	; GENERATE AND
578  		JSR	GNMZ          	; TEST AVAILABLE
579  ;
580  ;	MOVES
581  ;		
582  		LDX	BESTV        	; GET BEST MOVE
583  		CPX	#$0F           	; IF NONE
584  		BCC	MATE          	; OH OH!
585  ;		
586  MV2	LDX	BESTP        	; MOVE
587  		LDA	BOARD,X         ; THE
588  		STA	BESTV        	; BEST
589  		STX	PIECE        	; MOVE
590  		LDA	BESTM
591  		STA	SQUARE       	; AND DISPLAY
592  		JSR	MOVE           	; IT
593  		JMP	CHESS
594  ;		
595  MATE	LDA	#$FF           	; RESIGN
596  		RTS			; OR STALEMATE
597  ;		
598  ;       SUBROUTINE TO ENTER THE
599  ;       PLAYER'S MOVE
600  ;		
601  DISMV	LDX	#$04           	; ROTATE
602  DROL	ASL	DIS3          	; KEY
603  		ROL	DIS2         	; INTO
604  		DEX			; DISPLAY
605  		BNE	DROL		;
606  		ORA	DIS3
607  		STA	DIS3
608  		STA	SQUARE
609  		RTS	
610  ;		
611  ;       THE FOLLOWING SUBROUTINE ASSIGNS
612  ;       A VALUE TO THE MOVE UNDER
613  ;       CONSIDERATION AND RETURNS IT IN
614  ;	THE ACCUMULATOR	 
617  STRATGY	CLC	
618  		LDA	#$80
619  		ADC	WMOB         	; PARAMETERS
620  		ADC	WMAXC        	; WITH WHEIGHT
621  		ADC	WCC          	; OF O25
622  		ADC	WCAP1
623  		ADC	WCAP2
624  		SEC	
625  		SBC	PMAXC
626  		SBC	PCC
627  		SBC	BCAP0
628  		SBC	BCAP1
629  		SBC	BCAP2
630  		SBC	PMOB
631  		SBC	BMOB
632  		BCS	POS           	; UNDERFLOW
633  		LDA	#$00           	; PREVENTION
634  POS	LSR	
635  		CLC			; **************
636  		ADC	#$40
637  		ADC	WMAXC       	; PARAMETERS
638  		ADC	WCC         	; WITH WEIGHT
639  		SEC			; OF 05
640  		SBC	BMAXC
641  		LSR			; **************
642  		CLC	
643  		ADC	#$90
644  		ADC	WCAP0       	; PARAMETERS
645  		ADC	WCAP0       	; WITH WEIGHT
646  		ADC	WCAP0       	; OF 10
647  		ADC	WCAP0
648  		ADC	WCAP1
649  		SEC			; UNDER OR OVER-
650  		SBC	BMAXC        	; FLOW MAY OCCUR
651  		SBC	BMAXC        	; FROM THIS
652  		SBC	BMCC          	; SECTION
653  		SBC	BMCC
654  		SBC	BCAP1
655  		LDX	SQUARE      	; ***************
656  		CPX	#$33
657  		BEQ	POSN         	; POSITION
658  		CPX	#$34           	; BONUS FOR
659  		BEQ	POSN         	; MOVE TO
660  		CPX	#$22           	; CENTRE
661  		BEQ	POSN           	; OR
662  		CPX	#$25           	; OUT OF
663  		BEQ	POSN         	; BACK RANK
664  		LDX	PIECE
665  		BEQ	NOPOSN
666  		LDY	BOARD,X
667  		CPY	#$10
668  		BPL	NOPOSN
669  POSN	CLC
670  		ADC	#$02
671  NOPOSN	JMP	CKMATE       		; CONTINUE  
674  ;-----------------------------------------------------------------
675  ; The following routines were added to allow text-based board
676  ; display over a stANDard RS-232 port.
677  ;
678  POUT       JSR 	POUT9		; print CRLF
679  		JSR     POUT13		; print copyright
680  		JSR	POUT10		; print column labels
681  		LDY   	#$00		; init board location
682  		JSR	POUT5		; print board horz edge
683  POUT1	LDA   	#"|"		; print vert edge
684  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - SPACE
685  		LDX   	#$1F
686  POUT2	TYA			; scan the pieces for a location match
687             CMP	BOARD,X		; match found?
688             BEQ   	POUT4		; yes; print the piece's color AND type
689             DEX			; no
690             BPL	POUT2		; if not the last piece, try again
691  		TYA			; empty square	
692  		AND	#$01		; odd or even column?				
693  		STA   	TEMP		; save it
694  		TYA  			; is the row odd or even
695  		LSR			; shift column right 4 spaces 
696  		LSR			;
697  		LSR			;
698  		LSR			;
699  		AND   	#$01		; strip LSB  
700  		CLC			; 
701  		ADC   	TEMP		; combine row & col to determine square color  
702  		AND   	#$01		; is board square white or blk?
703  		BNE	POUT25 		; white, print space
704  		LDA   	#"*"		; black, print *
705  		.BYTE	$2c		; used to skip over LDA #$20
706  POUT25	LDA   	#$20		; ASCII space
707  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - SPACE
708  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - SPACE
709  POUT3	INY			; 
710  	        TYA			; get row number
711             AND   	#$08		; have we completed the row?	 
712             BEQ   	POUT1		; no, do next column
713  		LDA   	#"|"		; yes, put the right edge on
714  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - |             
715  		JSR	POUT12		; print row number
716  		JSR   	POUT9		; print CRLF
717             JSR   	POUT5		; print bottom edge of board
718  		CLC			; 
719  		TYA			; 
720  		ADC	#$08		; point y to beginning of next row
721  		TAY			;
722  		CPY   	#$80		; was that the last row?
723  		BEQ   	POUT8		; yes, print the LED values
724  		BNE   	POUT1		; no, do new row
726  POUT4	LDA   	REV		; print piece's color & type
727  		BEQ   	POUT41		;
728  		LDA	CPL+16,X	;
729  		BNE	POUT42		;
730  POUT41	LDA   	CPL,x		;
731  POUT42	JSR	SYSCHOUT	;
732  		LDA	cph,x		;
733  		JSR   	SYSCHOUT	; 
734  		BNE	POUT3		; branch always  
736  POUT5      TXA			; print "-----...-----<crlf>"
737  		PHA
738  		LDX	#$19
739  		LDA	#"-"
740  POUT6	JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - "-"
741  		DEX
742  		BNE	POUT6
743  		PLA
744  		TAX
745  		JSR	POUT9
746  		RTS	 		  
748  POUT8	JSR	POUT10		; 
749  		LDA   	$FB
750  		JSR   	SYSHEXOUT	; PRINT 1 BYTE AS 2 HEX CHRS	
751          	LDA   	#$20
752  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - SPACE
753          	LDA   	$FA
754  		JSR   	SYSHEXOUT	; PRINT 1 BYTE AS 2 HEX CHRS	
755          	LDA   	#$20
756  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - SPACE
757          	LDA   	$F9
758  		JSR   	SYSHEXOUT	; PRINT 1 BYTE AS 2 HEX CHRS	  
760  POUT9      LDA   	#$0D
761  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - CR
762          	LDA   	#$0A
763  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - LF
764             RTS   
766  POUT10	LDX   	#$00		; print the column labels
767  POUT11	LDA	#$20		; 00 01 02 03 ... 07 <CRLF>
768  		JSR   	SYSCHOUT
769  		TXA
770  		JSR	SYSHEXOUT
771  		INX
772  		CPX   	#$08
773  		BNE	POUT11
774  		BEQ	POUT9
775  POUT12	TYA
776  		AND 	#$70
777  		JSR 	SYSHEXOUT
778  		RTS 
780  POUT13	LDX   	#$00		; Print the copyright banner
781  POUT14	LDA   	banner,x
782  		BEQ   	POUT15
783  		JSR   	SYSCHOUT
784  		INX
785  		BNE   	POUT14
786  POUT15	rts         
788  KIN        LDA   	#"?"
789  		JSR   	SYSCHOUT	; PRINT ONE ASCII CHR - ?
790  		JSR   	SYSKIN		; GET A KEYSTROKE FROM SYSTEM
791             AND   	#$4F            ; MASK 0-7, AND ALPHA'S
792             RTS
x793  ;
x794  ; 6551 I/O Support Routines
x795  ;
x796  ;
x797  ;Init_6551     LDA   #$1F             ; 19.2K/8/1
x798  ;              STA   ACIActl          ; control reg 
x799  ;              LDA   #$0B             ; N parity/echo off/rx int off/ dtr active low
x800  ;		     STA   ACIAcmd          ; command reg 
x801  ;		     RTS                    ; done
802  ;
803  ; input chr from keyboard (waiting)
804  ;
805  SYSKIN         JMP   $2336     	    ; OS65DV33 char input routine
x806  		    LDA   ACIASta           ; Serial port status             
x807  		    AND   #$08              ; is recvr full
x808  		    BEQ   SYSKIN            ; no char to get
x809 		    LDA   ACIAdat           ; get chr
810                 RTS                     ;
811  ;
812  ; output to OutPut Port
813  ;
814  SYSCHOUT       PHA                     ; save registers
815                 JMP   $2443		    ; OS65DV33 char output routine
x816 ACIA_Out1      LDA   ACIASta           ; serial port status
x817  		    AND   #$10              ; is tx buffer empty
x818  		    BEQ   ACIA_Out1         ; no
819  		    PLA                     ; get chr
x820  		    STA   ACIAdat           ; put character to Port
821                 RTS                     ; done 
823  SYSHEXOUT      PHA                     ;  prints AA hex digits
824                 LSR                     ;  MOVE UPPER NIBBLE TO LOWER
825                 LSR                     ;
826                 LSR                     ;
827                 LSR                     ;
828                 JSR   PRINTDIG          ;
829                 PLA                     ;
830  PRINTDIG       PHY                     ;  prints A hex nibble (low 4 bits)
831                 AND   #$0F              ;
832                 TAY                     ;
833                 LDA   HEXDIGDATA,Y      ;
834                 PLY                     ;
835                 JMP   SYSCHOUT          ; 
837  HEXDIGDATA	.BYTE	"0123456789ABCDEF"
838  BANNER	.BYTE	"MicroChess (c) 1996-2002 Peter Jennings, peterj@benlo.com"
839  		.BYTE	$0d, $0a, $00
840  CPL	.BYTE	"WWWWWWWWWWWWWWWWBBBBBBBBBBBBBBBBWWWWWWWWWWWWWWWW"
841  CPH	.BYTE	"KQCCBBRRPPPPPPPPKQCCBBRRPPPPPPPP"
842  		.BYTE	$00
843  ;
844  ; end of added code
845  ;
846  ; BLOCK DATA
847  ;
848  SETW	.BYTE 	$03, $04, $00, $07, $02, $05, $01, $06
849          	.BYTE 	$10, $17, $11, $16, $12, $15, $14, $13
850          	.BYTE 	$73, $74, $70, $77, $72, $75, $71, $76
851  	 	.BYTE	$60, $67, $61, $66, $62, $65, $64, $63
852  
853  MOVEX   	.BYTE 	$00, $F0, $FF, $01, $10, $11, $0F, $EF, $F1
854  		.BYTE	$DF, $E1, $EE, $F2, $12, $0E, $1F, $21
855  
856  POINTS  	.BYTE 	$0B, $0A, $06, $06, $04, $04, $04, $04
857  		.BYTE 	$02, $02, $02, $02, $02, $02, $02, $02
858  
859  OPNING  	.BYTE 	$99, $25, $0B, $25, $01, $00, $33, $25
860  		.BYTE	$07, $36, $34, $0D, $34, $34, $0E, $52
861          	.BYTE 	$25, $0D, $45, $35, $04, $55, $22, $06
862  		.BYTE	$43, $33, $0F, $CC
865  ;
866  ; end of file
867  ;